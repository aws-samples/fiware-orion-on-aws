version: '3.5'

x-aws-vpc: '<Your VPC-ID>'
secrets:
  postgres_password:
    name: "<arn_aurora_secret>"
    external: true
services:
  cygnus:
    secrets:
      - postgres_password
    image: fiware/cygnus-ngsi:latest
    networks:
      - cygnus-sg
    container_name: fiware-cygnus
    deploy:
      x-aws-autoscaling:
        min: 2
        max: 4 #required
        cpu: 40
      resources:
        limits:
          cpus: '2'
          memory: 2048M
    ports:
      - '5055:5055'
      - '5080:5080'
    environment:
      - 'CYGNUS_POSTGRESQL_HOST=<Your-aurora-endpoint>'
      - 'CYGNUS_POSTGRESQL_PORT=5432'
      - 'CYGNUS_POSTGRESQL_USER=postgres'
      - 'CYGNUS_POSTGRESQL_PASS_FILE=/run/secrets/postgres_password'
      - 'CYGNUS_POSTGRESQL_ENABLE_CACHE=true'
      - 'CYGNUS_POSTGRESQL_SERVICE_PORT=5055'
      - 'CYGNUS_LOG_LEVEL=WARN'
      - 'CYGNUS_API_PORT=5080'
      - 'CYGNUS_SERVICE_PORT=5055'
x-aws-cloudformation:
  Resources:
    CygnusTCP5055TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckPath: /v1/version
        HealthCheckPort: 5080
        HealthCheckProtocol: HTTP
        Protocol: HTTP
        Port: 5055
        VpcId: <Your VPC-ID>
        TargetType: ip
    CygnusTCP5080TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      Properties:
        HealthCheckPath: /v1/version
        HealthCheckPort: 5080
        HealthCheckProtocol: HTTP
        Protocol: HTTP
        Port: 5080
        VpcId: <Your VPC-ID>
        TargetType: ip
    LoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        IpAddressType: ipv4
        Name: cygnus-alb
        LoadBalancerAttributes:
          - Key: routing.http2.enabled
            Value: true
        Scheme: internal
        SecurityGroups:
          - <Cygnus-ALB Security Group ID>
        Subnets:
          - <Private Subnet1 ID>
          - <Private Subnet2 ID>
        Type: application
    CygnusTCP5055Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn:
          Ref: LoadBalancer
        Port: 5055
        Protocol: HTTP
        DefaultActions:
          - TargetGroupArn:
              Ref: CygnusTCP5055TargetGroup
            Type: forward
    CygnusTCP5080Listener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
        LoadBalancerArn:
          Ref: LoadBalancer
        Port: 5080
        Protocol: HTTP
        DefaultActions:
          - TargetGroupArn:
              Ref: CygnusTCP5080TargetGroup
            Type: forward
networks:
  cygnus-sg:
    external: true
    name: <Cygnus Security Group ID>
